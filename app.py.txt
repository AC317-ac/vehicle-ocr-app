import streamlit as st
import pandas as pd
import io
import re
import json
from google.cloud import vision
from google.oauth2 import service_account

# ------------------- Page Settings -------------------
st.set_page_config(page_title="HK Vehicle OCR to Excel", layout="centered")
st.title("📄 香港車輛登記文件 ➜ Excel (Google OCR)")

# ------------------- File Upload -------------------
gcp_key_file = st.file_uploader("📎 上傳 GCP 金鑰 JSON 檔 (service account)", type="json")
uploaded_file = st.file_uploader("📥 上傳車輛登記 JPG / PNG / PDF", type=["jpg", "jpeg", "png", "pdf"])

# ------------------- Field Parsing -------------------
def parse_vehicle_data(text):
    fields = {
        'Registration Mark': r'Registration Mark\s+([A-Z]+\d+)',
        'Make': r'Make\s+([A-Z ]+)',
        'Model': r'Model\s+([A-Z0-9 \(\)\-]+)',
        'Chassis No': r'Chassis No\.?\s+([A-Z0-9]+)',
        'Engine No': r'Engine No\.?\s+([A-Z0-9]+)',
        'Year of Manufacture': r'Year of Manufacture\s+(\d{4})',
        'Owner': r'Full Name of Registered Owner\s+([A-Z ]+)',
    }
    data = {}
    for key, pattern in fields.items():
        match = re.search(pattern, text)
        data[key] = match.group(1).strip() if match else ''
    return data

# ------------------- Export to Excel -------------------
def export_to_excel(data):
    df = pd.DataFrame([data])
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False)
    return output.getvalue()

# ------------------- Google OCR -------------------
def run_ocr(image_bytes, credentials):
    client = vision.ImageAnnotatorClient(credentials=credentials)
    image = vision.Image(content=image_bytes)
    response = client.document_text_detection(image=image)
    if response.error.message:
        st.error(f"OCR error: {response.error.message}")
        return ""
    return response.full_text_annotation.text

# ------------------- Main Logic -------------------
if gcp_key_file and uploaded_file:
    try:
        with st.spinner("🔍 正在處理 OCR..."):
            # Load credentials from uploaded JSON
            key_data = json.load(gcp_key_file)
            credentials = service_account.Credentials.from_service_account_info(key_data)

            image_bytes = uploaded_file.read()
            ocr_text = run_ocr(image_bytes, credentials)

            st.text_area("📝 OCR 擷取內容", ocr_text, height=300)

            parsed = parse_vehicle_data(ocr_text)
            st.subheader("📋 擷取欄位")
            st.json(parsed)

            excel_bytes = export_to_excel(parsed)
            st.download_button("📥 下載 Excel", data=excel_bytes, file_name="vehicle_data.xlsx")

    except Exception as e:
        st.error(f"⚠️ 出錯了: {e}")
else:
    st.info("請先上傳 GCP 金鑰 JSON 檔與一份登記文件")
